// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using SalesReturnsSystem.Entities;

namespace SalesReturnsSystem.DAL;

public partial class eBike_2025Context : DbContext
{
    public eBike_2025Context(DbContextOptions<eBike_2025Context> options)
        : base(options)
    {
    }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Coupon> Coupons { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<CustomerVehicle> CustomerVehicles { get; set; }

    public virtual DbSet<DatabaseVersion> DatabaseVersions { get; set; }

    public virtual DbSet<Job> Jobs { get; set; }

    public virtual DbSet<JobDetail> JobDetails { get; set; }

    public virtual DbSet<JobPart> JobParts { get; set; }

    public virtual DbSet<Part> Parts { get; set; }

    public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }

    public virtual DbSet<PurchaseOrderDetail> PurchaseOrderDetails { get; set; }

    public virtual DbSet<ReceiveOrder> ReceiveOrders { get; set; }

    public virtual DbSet<ReceiveOrderDetail> ReceiveOrderDetails { get; set; }

    public virtual DbSet<ReturnedOrderDetail> ReturnedOrderDetails { get; set; }

    public virtual DbSet<Sale> Sales { get; set; }

    public virtual DbSet<SaleDetail> SaleDetails { get; set; }

    public virtual DbSet<SaleRefund> SaleRefunds { get; set; }

    public virtual DbSet<SaleRefundDetail> SaleRefundDetails { get; set; }

    public virtual DbSet<StandardJob> StandardJobs { get; set; }

    public virtual DbSet<UnorderedPurchaseItemCart> UnorderedPurchaseItemCarts { get; set; }

    public virtual DbSet<Vendor> Vendors { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("Latin1_General_CI_AS");

        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.CategoryID).HasName("PK_Category_CategoryID");
        });

        modelBuilder.Entity<Coupon>(entity =>
        {
            entity.HasKey(e => e.CouponID).HasName("PK_Coupon_CouponID");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.CustomerID).HasName("PK_Customer_CustomerID");

            entity.Property(e => e.ContactPhone).IsFixedLength();
            entity.Property(e => e.PostalCode).IsFixedLength();
            entity.Property(e => e.Province).IsFixedLength();
        });

        modelBuilder.Entity<CustomerVehicle>(entity =>
        {
            entity.HasKey(e => e.CustomerVehicleID).HasName("PK_CustomerVehicle_CustomerVehicleID");

            entity.Property(e => e.Make).IsFixedLength();
            entity.Property(e => e.Model).IsFixedLength();
            entity.Property(e => e.VehicleIdentification).IsFixedLength();

            entity.HasOne(d => d.Customer).WithMany(p => p.CustomerVehicles).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<DatabaseVersion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_DatabaseVersion_Id");

            entity.Property(e => e.DateTime).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<Job>(entity =>
        {
            entity.HasKey(e => e.JobID).HasName("PK_Job_JobID");

            entity.Property(e => e.CouponID).HasDefaultValue(0);
            entity.Property(e => e.VehicleIdentification).IsFixedLength();

            entity.HasOne(d => d.CustomerVehicle).WithMany(p => p.Jobs).HasConstraintName("FK_Job_CustomerVehicle");
        });

        modelBuilder.Entity<JobDetail>(entity =>
        {
            entity.HasKey(e => e.JobDetailID).HasName("PK_JobDetail_JobDetailID");

            entity.Property(e => e.StatusCode)
                .HasDefaultValue("I")
                .IsFixedLength();

            entity.HasOne(d => d.Job).WithMany(p => p.JobDetails).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<JobPart>(entity =>
        {
            entity.HasKey(e => e.JobPartID).HasName("PK_JobPart_JobPartID");

            entity.HasOne(d => d.Job).WithMany(p => p.JobParts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JobPart_Jobs_JobID");

            entity.HasOne(d => d.Part).WithMany(p => p.JobParts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JobPart_Parts_PartID");
        });

        modelBuilder.Entity<Part>(entity =>
        {
            entity.HasKey(e => e.PartID).HasName("PK_Part_PartID");

            entity.Property(e => e.Refundable)
                .HasDefaultValue("Y")
                .IsFixedLength();

            entity.HasOne(d => d.Category).WithMany(p => p.Parts).OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Vendor).WithMany(p => p.Parts).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<PurchaseOrder>(entity =>
        {
            entity.HasKey(e => e.PurchaseOrderID).HasName("PK_PurchaseOrder_PurchaseOrderID");

            entity.HasOne(d => d.Vendor).WithMany(p => p.PurchaseOrders).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<PurchaseOrderDetail>(entity =>
        {
            entity.HasKey(e => e.PurchaseOrderDetailID).HasName("PK_PurchaseOrderDetail_PurchaseOrderDetailID");

            entity.HasOne(d => d.Part).WithMany(p => p.PurchaseOrderDetails).OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.PurchaseOrder).WithMany(p => p.PurchaseOrderDetails).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<ReceiveOrder>(entity =>
        {
            entity.HasKey(e => e.ReceiveOrderID).HasName("PK_ReceiveOrder_ReceiveOrderID");

            entity.HasOne(d => d.PurchaseOrder).WithMany(p => p.ReceiveOrders).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<ReceiveOrderDetail>(entity =>
        {
            entity.HasKey(e => e.ReceiveOrderDetailID).HasName("PK_ReceiveOrderDetail_ReceiveOrderDetailID");

            entity.HasOne(d => d.PurchaseOrderDetail).WithMany(p => p.ReceiveOrderDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReceiveOrderDetail_PurchaseOrderDetail_OrderDetailID");

            entity.HasOne(d => d.ReceiveOrder).WithMany(p => p.ReceiveOrderDetails).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<ReturnedOrderDetail>(entity =>
        {
            entity.HasKey(e => e.ReturnedOrderDetailID).HasName("PK_ReturnedOrderDetail_ReturnOrderDetailID");

            entity.HasOne(d => d.PurchaseOrderDetail).WithMany(p => p.ReturnedOrderDetails).HasConstraintName("FK_ReturnedOrderDetail_PurchaseOrderDetail_OrderDetailID");

            entity.HasOne(d => d.ReceiveOrder).WithMany(p => p.ReturnedOrderDetails).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Sale>(entity =>
        {
            entity.HasKey(e => e.SaleID).HasName("PK_Sale_SaleID");

            entity.Property(e => e.PaymentType).IsFixedLength();
            entity.Property(e => e.SaleDate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Customer).WithMany(p => p.Sales).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<SaleDetail>(entity =>
        {
            entity.HasKey(e => e.SaleDetailID).HasName("PK_SaleDetail_SaleDetailID");

            entity.HasOne(d => d.Part).WithMany(p => p.SaleDetails).OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Sale).WithMany(p => p.SaleDetails).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<SaleRefund>(entity =>
        {
            entity.HasKey(e => e.SaleRefundID).HasName("PK_SaleRefund_SaleRefundID");

            entity.Property(e => e.SaleRefundDate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Sale).WithMany(p => p.SaleRefunds)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CK_SaleRefund_Sale_SaleID");
        });

        modelBuilder.Entity<SaleRefundDetail>(entity =>
        {
            entity.HasKey(e => e.SaleRefundDetailID).HasName("PK_SaleRefundDetail_SaleRefundDetailID");

            entity.HasOne(d => d.Part).WithMany(p => p.SaleRefundDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SaleRefundDetail_Part_PartId");

            entity.HasOne(d => d.SaleRefund).WithMany(p => p.SaleRefundDetails).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<StandardJob>(entity =>
        {
            entity.HasKey(e => e.StandardJobID).HasName("PK_StandardJob_StandardJobID");
        });

        modelBuilder.Entity<UnorderedPurchaseItemCart>(entity =>
        {
            entity.HasKey(e => e.UnorderedItemID).HasName("PK_UnorderedPurchaseItemCart_CartID");

            entity.HasOne(d => d.ReceiveOrder).WithMany(p => p.UnorderedPurchaseItemCarts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UnorderedPurchaseItemCart_ReceiveOrder");
        });

        modelBuilder.Entity<Vendor>(entity =>
        {
            entity.HasKey(e => e.VendorID).HasName("PK_Vendor_VendorID");

            entity.Property(e => e.PostalCode).IsFixedLength();
            entity.Property(e => e.ProvinceID)
                .HasDefaultValue("AB")
                .IsFixedLength();
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}