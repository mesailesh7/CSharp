// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using PurchasingSystem.Entities;

namespace PurchasingSystem.DAL;

public partial class EBikeContext : DbContext
{
    public EBikeContext(DbContextOptions<EBikeContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Part> Parts { get; set; }

    public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }

    public virtual DbSet<PurchaseOrderDetail> PurchaseOrderDetails { get; set; }

    public virtual DbSet<Vendor> Vendors { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("Latin1_General_CI_AS");

        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.CategoryID).HasName("PK_Category_CategoryID");
        });

        modelBuilder.Entity<Part>(entity =>
        {
            entity.HasKey(e => e.PartID).HasName("PK_Part_PartID");

            entity.Property(e => e.Refundable)
                .HasDefaultValue("Y")
                .IsFixedLength();

            entity.HasOne(d => d.Category).WithMany(p => p.Parts).OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Vendor).WithMany(p => p.Parts).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<PurchaseOrder>(entity =>
        {
            entity.HasKey(e => e.PurchaseOrderID).HasName("PK_PurchaseOrder_PurchaseOrderID");

            entity.HasOne(d => d.Vendor).WithMany(p => p.PurchaseOrders).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<PurchaseOrderDetail>(entity =>
        {
            entity.HasKey(e => e.PurchaseOrderDetailID).HasName("PK_PurchaseOrderDetail_PurchaseOrderDetailID");

            entity.HasOne(d => d.Part).WithMany(p => p.PurchaseOrderDetails).OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.PurchaseOrder).WithMany(p => p.PurchaseOrderDetails).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Vendor>(entity =>
        {
            entity.HasKey(e => e.VendorID).HasName("PK_Vendor_VendorID");

            entity.Property(e => e.PostalCode).IsFixedLength();
            entity.Property(e => e.ProvinceID)
                .HasDefaultValue("AB")
                .IsFixedLength();
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}